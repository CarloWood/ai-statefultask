This file describes the design specs of AIStatefulTask.

The main idea behind a task (a class derived from AIStatefulTask) is:

   It should be possible to understand what a task does
   by just looking at (the source code of) a single task
   at a time.
   
A typical task will do certain things, in a certain order, and wait
inbetween for events (like other tasks finishing) before it can continue
with the next thing.

The main function of a task is its `multiplex_impl(state)' function that
roughly looks like this:

void MyTask::multiplex_impl(state_type state)
{
  switch(state)
  {
    case state1:
      // ... code here
      break;
    case state2:
      // ... code here
      break;
    // etc.
  }
}

where usually the task will progress mostly towards higher states over
time (ie, first state1, then state2, etc), so the above code reads
intuitively simple: top down. However, also in most cases, the task
will go idle for some time between execution of state1 and state2
because it has to wait for some event (triggered by the code in state1).
A simple example could be that in state1 we start a timer, and then
continue in state2 once that timer has expired.

A task is only loosely coupled to threads: theoretically each time the
execution of the task is suspended (a break; leaving the multiplex_impl
function) it may switch threads before continuing its execution.

This is not important to the task itself, as only one thread at a time
will be executing a given task, it can be viewed as single threaded as
long as the data that it deals with is only handled by the task
(object). If data is also accessed outside the task then it should be
protected against concurrent access as usual, just as it should have
been when the task would have been executed by a single thread.

Note that the only way to change states is by a call to set_state() from
within multiplex_impl(). And a task will keep running until either
finish() (or abort()) is called.

So, to progress from state1 to state3 and then finish, one could write
the following:

void MyTask::initialize_impl()
{
  set_state(state1);
}

void MyTask::multiplex_impl(state_type state)
{
  switch(state)
  {
    case state1:
      // ... code here
      set_state(state2);
      break;
    case state2:
      // ... code here
      set_state(state3);
      break;
    case state3:
      // ... code here
      finish();
      break;
  }
}


Tasks and threads
-----------------

A task has two major modes that play an important role:

1) The task is "executing".
2) The task is "not executing".

A task is "executing" when some thread has locked the
AIStatefulTask::mMultiplexMutex mutex (which is done while executing the
multiplex_impl function, see also README.multiplex for an indepth
description of when this mutex is locked).

The thread that locked mMultiplexMutex might be executing multiple tasks
at the same time: it is possible and allowed to run a task, or activate
a running task, from within a task, which in turn might start executing
right away.

From the perspective of a thread, it is important to know if it is the
one that is executing a task, or that some other thread is. We call the
thread that obtained the mutex the "executing thread" and all other
threads "non-executing threads".

Hence, if a task is not executing then ALL threads are non-executing
threads.

If a task is executing then one thread is the executing thread, and all
other threads are the non-executing threads.

Control functions
-----------------

A running task can be controlled by calling member functions of the
AIStatefulTask base class. There are thirteen such member functions.
One member function may be called from both, executing and non-executing
threads:

1) signal(condition)

This function is therefore public; it may be called from any thread
at any time.

One control function may only be called by a child task (and therefore
by any thread), or from multiplex_impl by the executing-thread:

2) abort()

The rest may only be called by the executing thread (aka, from within
multiplex_impl()). These functions are therefore protected:

3) set_state(new_state)
4) wait(condition)
5) wait_until(wait_condition, conditions)
6) wait_until(wait_condition, conditions, new_state)
7) finish()
8) yield()
9) target(engine)
10) yield(engine)
11) yield_frame(frames)
12) yield_ms(ms)
13) yield_if_not(engine)

A task executes code that belongs to a given "state" and (possibly)
keeps doing so (executing that same state) until one of the control
functions (except signal()) is called.

Hence, every state MUST (eventually, and rather sooner than later) call
one of the control functions, or a task could go into a tight loop using
100% CPU.

Moreover, an executing thread that calls abort(), wait(condition),
wait_until(...) or finish() should immediately stop executing and
leave multiplex_impl() (aka, those functions should be followed by a
break). In most cases you also want to break after a call to yield()
(which can be called anywhere in the state though, but it seems to
read better that way).

Since the effect of any of the yield functions, though yield_if_not only
when that returns true, is basically the same, we can consider just
'yield' for the remainder of this analysis. If yield_if_not returns
false however, then nothing changed and we can simply continue to
execute code in the task, now having the guarantee that we run in a
specific engine.

The following details the effect that a call to each member function
should have, starting with the protected member functions:

set_state
---------

A call to set_state() has no immediate effect, except that the NEXT
invokation of multiplex_impl will be with the state that was passed to
the (last) call to set_state().

abort and finish
----------------

A call to abort() and finish() will cause a task to not call
multiplex_impl() again at all after leaving it (except when
finish_impl() calls run() again, in which case the task is restarted
from the beginning).

yield
-----

A call to yield() has basically no effect on a task, except that its
execution is delayed a bit: this causes the task to return to the
AIEngine mainloop code. That way other running tasks (in that enigine)
will get the chance to execute before this task is continued.

Note that if a state calls yield() without calling first set_state()
then this might cause 100% CPU usage despite the call to yield() because
the task will rapidly execute again and then call yield() over and over:
an engine keeps iterating over its tasks until all tasks finished, with
the exception of gMainThreadEngine that will return from
AIEngine::mainloop() regardless after at least AIEngine::sMaxDuration
milliseconds have passed (which can be set by calling
gMainThreadEngine.setMaxDuration(milliseconds)).

wait
----

A call to wait(condition) will cause a task to go idle,
until the condition is signalled by calling signal(condition)
from the outside. Theoretically this can happen arbitrarily,
so the task should just test a condition and if not yet met
call wait(condition) again; for example:

  case StartChild:
    // ... start child task that will eventually set child_task
    // and then call signal(wait_for_child_task), here.
    set_state(WaitingForChildTask);
    break;
  case WaitingForChildTask:
    if (!child_task)
    {
      wait(wait_for_child_task); // Where uint32_t wait_for_child_task
                                 // is for example one of 1, 2, 4, 8, ...
      break;
    }
    set_state(ChildFinished);
    break;

As in this code it doesn't matter if the task wakes up "randomly"; it
will not do anything until child_task returns true. Always assume that
a task that called wait() can wake up spuriously.

It must be taken care of that whenever child_task might have changed
(from false to true) due to some change, that signal(wait_for_child_task)
is called. So, in the above example, whenever child_task (might have)
changed to true, call signal(wait_for_child_task).

Since this waiting pattern is expected to happen often, a
convenience function is added that allows to write the above code
as follows:

  case StartChild:
    // ... start child task that will eventually set child_task
    // and then call signal(wait_for_child_task), here.
    wait_until([&child_task]{ return child_task; }, wait_for_child_task, ChildFinished);
    break;

completely eliminating the need for state WaitingForChildTask.

Finally we'll describe the effect of calling signal() in detail:

When signal(condition1) is called, the condition bit is marked as
non-idle. If the task is waiting on that condition then it is woken
up. If it is not waiting then it is guaranteed that the task will
do at least one re-entry of multiplex_impl even if wait(condition1)
is called before it leaves the current loop. However, if the task
did call, or calls, wait(some_other_condition) then the call to
signal(condition1) does not cause multiplex_impl() to be called;
this allows one to abandon a waiting condition and ignore late
signals that it might produce by simply stopping to call wait()
on that condition: a condition should not be reused for another
boolean expression.

-----------------------------------------------------------------------------

Lets combine the internal state of a running task with the
fact that it is executing or not; and that it is idle
or non-idle.

running: The task was initialized (AFTER initialize_impl()) and did not
         call finish() or abort() yet (BEFORE finish() or abort()).
         When a task enters multiplex_impl() it is guaranteed to be
         running.

idle:    A task is idle immediately after a call to wait(condition)
         in the case that there was only one call to signal(condition)
         since the previous call to wait(condition) (or zero calls
         to signal(condition) when wait(condition) was never called
         yet). As soon as signal(condition) is called, the task is
         again non-idle, EVEN though idle() will still return true.
         This is because idle() returns the idle state directly after
         calling wait(condition), even though the call to
         signal(condition) will schedule a new run.

waiting: running and idle since the last call to wait(); if already
         having been woken up due to a call to signal(condition)
         then we're still waiting until we actually re-entered
         begin_loop().

aborted: abort() was called. This is guaranteed to be true immediately
         after returning from abort() unless finish() was called
         before already. Note that if finish() is called immediately
         after (or was already called, but didn't lock the mutex yet)
         then that call to finish() has no effect: the task will be
         aborted. This looks like a race condition, but the reason is
         that when finish() is called after a call to abort() then
         abort() was called from the outside while the task was
         executing and it might have used information from an object
         that was already in an inconsistent (failing) state, too,
         before calling finish().
         The state remains aborted until after we returned abort_impl
         and before calling finish_impl.

aborting: This state is reached after returning from initialize_impl()
         or multiplex_impl() and we are aborted. Or when abort() is
         called from the outside while the task is idle (in which
         case we are in the state aborting directly after the call to
         abort()).

successfully finished: After a call to finish() and not aborted. Note
         that even if a call to abort() happens after this, we'll stay
         in this state (the call to abort() will be ignored).
