/*!
@page writingatask Writing a task

A typical Task will look like,

@code
#include "statefultask/AIStatefulTask.h"

class MyTask : public AIStatefulTask
{
 protected:
  using direct_base_type = AIStatefulTask;      // The immediate base class of this task.

  // The different states of the task.
  enum my_task_state_type {
    MyTask_start = direct_base_type::state_end, // The first state.
    ...a list of all states...
    MyTask_done                                 // The last state.
  };

 public:
  static state_type constexpr state_end = MyTask_done + 1;	// The last state plus one.

 ...

 protected:
  ~MyTask() override;
  char const* state_str_impl(state_type run_state) const override;
  void multiplex_impl(state_type run_state) override;
  // Optional:
  void initialize_impl() override;	// Default starts with first state.
  void abort_impl() override;		// Default does nothing.
  void finish_impl() override;		// Default does nothing.

 public:
  // In debug mode, passing `true` to the constructor of a task causes
  // debug output to dc::statefultask regarding running the state machine.
  MyTask(CWDEBUG_ONLY(bool debug = false)) : AIStatefulTask(CWDEBUG_ONLY(debug)) { }
};

char const* MyTask::state_str_impl(state_type run_state)
{
  switch (run_state)
  {
    // A complete listing of my_task_state_type.
    AI_CASE_RETURN(MyTask_start);
    ...a list of all states...
    AI_CASE_RETURN(MyTask_done);
  }
  ASSERT(false);
  return "UNKNOWN STATE";
}

void MyTask::multiplex_impl(state_type run_state)
{
  switch (run_state)
  {
    // A complete listing of my_task_state_type.
    case MyTask_start:
      // Handle state.
      break;
    ...a list of all states...
    case MyTask_done:
      finish();
      break;
  }
}
@endcode

Then in @c{multiplex_impl} each state need to be implemented.
Here are a few examples.

@section changing_state Changing state

It is simply the last call to @c{set_state} that is used to determine
what state to run the next invocation of @c{multiplex_impl}. Also,
as might be intuitively correct, it is not really necessary to return
from @c{multiplex_impl} to change state; you are allowed to simply fall-through
to the next state (even without calling @c{set_state}).

@code
  case MyTask_state10:
    set_state(MyTask_state11);      // By default run state11 next.
    if (something)
    {
      set_state(MyTask_state12);    // Continue with state12.
      break;
    }
    if (foobar)
    {
      // Optional code here.
      break;                        // Continue with state11.
    }
    // Optional code here.
    [[fallthrough]];                // Continue with state11 without even
                                    // returning from multiplex_impl.
  case MyTask_state11:
    ...

@endcode

@section yielding Yielding

If in the above code you'd have used a @c{break} instead of falling
through, then the program would have almost acted in the same way:
upon return from @c{multiplex_impl} the engine sees that the task
is still running and will therefore immediately reenter @c{multiplex_impl}.

In other words, doing a @c{break} is <em>not</em> the same as a @c{yield}.

Even if a task runs in an engine with a max_duration, and it would
go over that time limit then doing a @c{break} still doesn't do anything
but immediately reentering @c{multiplex_impl} to continue with the next
state. The test that looks if the engine did run for too long only
is done once we actually return to the @c{mainloop()} of the engine
which only happens when either @c{wait} or @c{yield} is called.

Hence, if you want this time check to take place, or if you simply
want other tasks in the same engine to get a chance to run too
while this task is working, call @link group_yield yield*()@endlink.
For example,

@code
  case MyTask_state10:
    set_state(MyTask_state11);      // By default run state11 next.
    if (something)
    {
      set_state(MyTask_state12);    // Continue with state12.
      break;
    }
    if (foobar)
      do_computation_A();
    else
      do_computation_B();
    yield();                      // Make sure other tasks and/or the
                                  // mainloop get CPU time too.
    break;                        // Continue with state11.
@endcode

@section waiting Waiting

Finally there are a couple of typical ways to go idle while
waiting for some event to happen. Under the hood all of those
use the same mechanism: you call @c{wait(condition)} and the
task goes idle until something else calls @c{task.signal(condition)}.

Here @c{condition} is simply a @c{uint32_t} bit mask. Normally
you will just use @c 1. In order not to wake up when some old
@c{signal} happens for a condition that you are no longer
waiting for, each task has up to 32 different possible
values. If you were waiting for mask @c 1 and it didn't come
or might still be coming (again) but now you want to wait
for something else, then simply wait for condition @c 2, @c 4
or @c 8 etc so that you will automatically ignore an (old and
lagging behind) signal on @c 1. It is possible to wait and/or
signal multiple conditions at the same time however: a call
to @c{wait(condition1)} is woken up by a call to @c{signal(condition2)}
when @c{condition1 &amp; condition2} is non-zero.

For example,

@code
void some_event()
{
  task.signal(1);
}

...
  case MyTask_state20:
    set_state(MyTask_state21);  // Continue with state21.
    wait(1);                    // Go idle until some_event() is called.
    break;
@endcode

Often you want to wait for a real condition however, for example @c{x > y},
and it is not really possible to call @c{signal} when that happens and then still
be sure that this condition is still true once the task starts running again.

In general, you will only have events that when they happen make it possible,
preferably likely that the condition that you are waiting for is true.

Code that needs this will typically look like this:

@code
void some_event()
{
  ++x;  // Now x might have become larger than y.
  task.signal(1);
}

...
  case MyTask_state20:
    wait_until([&](){ return x > y;}, 1, MyTask_state21);
        // Continue with state21 as soon as x > y.
    break;

@endcode

Simply running another task and waiting until it is finished:

@code
  case MyTask_state30:
    m_task = new MyChildTask;
    m_task->run(handler, this, 2);  // 2 is just the condition bit to be used.
    set_state(MyTask_state31);      // Continue with state31...
    wait(2);                        // ...once m_task has finished.
    break;
@endcode

Running some computational extensive function in another thread (see @link AIPackagedTask< R(Args...)> AIPackagedTask@endlink):

@code
class MyTask : AIStatefulTask
{
  AIPackagedTask<int(double, double)> m_calculate;
  static condition_type constexpr calculate_condition = 4;
      // The condition bit to be used.

 public:
  MyTask(int calculate_handle) :
      m_calculate(this, calculate_condition, &func, calculate_handle) { }
        // m_calculate will call func(double, double).
...
};

...
  case MyTask_state20:
    m_calculate(3.0, 4.1);              // Copy parameters to m_calculate.
    set_state(MyTask_dispatch);
  case MyTask_dispatch:
    if (!m_calculate.dispatch())        // Put m_calculate in the queue.
    {
      yield_frames(1);                  // Yield because the queue was full.
      break;
    }
    set_state(MyTask_state21);          // Continue with state21 once the
    break;                              //   function finished executing.
  case MyTask_state21:
  {
    int result = m_calculate.get();     // Get the result.
@endcode

Note that upon a successful queue by @link AIPackagedTask<R(Args...)>::dispatch dispatch@endlink,
@link AIStatefulTask::wait_until wait_until@endlink was already called on the current task;
no additional call to wait is necessary here.

@link AIPackagedTask< R(Args...)> AIPackagedTask@endlink also has a constructor that allows
using a member function of some object to be used as callback.

*/
